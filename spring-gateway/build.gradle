plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'com.google.cloud.tools.jib' version '1.7.0'
}

jib.to.image ='gcr.io/PROJECT-ID/gateway-service:v1'
//gradle jibDockerBuild --image=gateway-service:v1


group = 'com.gomezrondon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR3")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
//	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
//	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}


import org.apache.tools.ant.taskdefs.condition.Os

task checkWin(type:Exec){
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows "
    }else 
	if (Os.isFamily(Os.FAMILY_UNIX)) {
            commandLine 'bash', '-c', 'gradle build -x test'
        println "*** Linux "
    }
}


ext {
    set('gcpProjectName', "ut-265822")
    set('gcpProjectVersion', "v1")
	set('localImage', true) 
}


task jibSetLocalImage(){
println ">> ${localImage} <<"
    if(localImage){
        jib.to.image =project.name+':v1'
    }else{
        jib.to.image = "gcr.io/${gcpProjectName}/${project.name}:${gcpProjectVersion}"
    }
	
}


task dockerImage(type:Exec) {
 
	dependsOn jibSetLocalImage
 
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		println "*** Windows "
		commandLine 'cmd', '/c', 'gradle -x test jibDockerBuild'
	}else 
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		println "*** Linux "
		commandLine 'bash', '-c', 'gradle -x test jibDockerBuild'
	}
}



task pushImageToGCR(type:Exec){
    dependsOn jibSetLocalImage, dockerImage

    commandLine 'bash', '-c', "docker push ${jib.to.image}"
}


task createTarImage(type:Exec) {
	dependsOn jibSetLocalImage

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows "
		commandLine 'cmd', '/c', 'gradle -x test jibbuildTar'
	}else 
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		println "*** Linux "
		commandLine 'bash', '-c', 'gradle -x test jibbuildTar'
	}	
}


task loadTarImage(type:Exec) {
	dependsOn createTarImage

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows "
		commandLine 'cmd', '/c', 'docker load --input build/jib-image.tar'
	}else 
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		println "*** Linux "
		commandLine 'bash', '-c', 'docker load --input build/jib-image.tar'
	}
}

task generateK8sYml(type: Exec){
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		println "*** Windows "

		commandLine 'cmd', '/c', "kubectl create deployment ${project.name} --image=${project.name}:v1 --dry-run -o=yaml > deploy-app.yaml"
		commandLine 'cmd', '/c', "kubectl create service clusterip ${project.name} --tcp=8080:8080 --dry-run -o=yaml > app-service.yaml"

	}else
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		println "*** Linux "
		commandLine 'bash', '-c', 'docker load --input build/jib-image.tar'
	}
}

ext {
	command = project.hasProperty('command') ? project.property('command') : 'run'
	//gradle skaRun -Pcommand=run
}

task skaRun(type:Exec) {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		println "*** Windows "
		commandLine 'cmd', '/c', 'skaffold ' + command
	}else
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		println "*** Linux "
		commandLine 'bash', '-c', 'skaffold ' + command
	}
}