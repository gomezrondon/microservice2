plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'com.google.cloud.tools.jib' version '1.7.0'
}

jib.to.image ='gcr.io/PROJECT-ID/eureka-server:v1'
//gradle jibDockerBuild --image=eureka-server:v1

group = 'com.gomezrondon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR8")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}


//gradle clean bootBuildImage
bootJar{
	layered()
}


import org.apache.tools.ant.taskdefs.condition.Os

task checkWin(type:Exec){
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows "
    }else 
	if (Os.isFamily(Os.FAMILY_UNIX)) {
            commandLine 'bash', '-c', 'gradle build -x test'
        println "*** Linux "
    }
}

ext {
	set('gcpProjectName', "ut-265822")
	set('gcpProjectVersion', "v1")
}

bootBuildImage {
	imageName = "gcr.io/${gcpProjectName}/${project.name}:${gcpProjectVersion}"
}


task pushImageToGCR(type:Exec){
	dependsOn bootBuildImage
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine 'bash', '-c', "docker push ${bootBuildImage.imageName}"
	}else
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		println "*** Linux "
		commandLine 'bash', '-c', 'docker push ${bootBuildImage.imageName}'
	}
}



task generateK8sYml(type: Exec){

	commandLine 'cmd', '/c', "kubectl create deployment ${project.name} --image=${bootBuildImage.imageName} --dry-run -o=yaml > deploy-app.yaml"
	commandLine 'cmd', '/c', "kubectl create service clusterip ${project.name} --tcp=8761:8761 --dry-run -o=yaml > app-service.yaml"

}


ext {
	command = project.hasProperty('command') ? project.property('command') : 'run'
	//gradle skaRun -Pcommand=run
}

task skaRun(type:Exec) {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		println "*** Windows "
		commandLine 'cmd', '/c', 'skaffold ' + command
	}else
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		println "*** Linux "
		commandLine 'bash', '-c', 'skaffold ' + command
	}
}